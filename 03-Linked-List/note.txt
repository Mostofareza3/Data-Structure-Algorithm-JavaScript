1. What is Linked List?
ans:
A data structure that contains a head,tail and length property.
Linked List consist of nodes, and each node has a value and a pointer to another node or null.


2. Comparisons with Array.
ans:
    Array->
        * Indexed in order!
        * Insertion and deletion can be expensive.
        * Can quickly be accessed at a specific index.
    Linked List->
        * Do not have indexes.
        * Connected via nodes with a next pointer.
        * Random access is not allowed.


3. Explain Pushing in Linked List.
ans:
    Pushing means add new node as last element of the list. steps are explained below->
    1. create a function that receive a value
    2. create a new node using the value passed to the function
    3. if there is no head property on the list, set the head   and tail to be the newly created node.
    4. Otherwise set the next property on the tail to be the new node and set the tail property on the list to be the newly created node
    5. Increment the length by one.


4. Explain Popping in Linked List.
ans:
    Popping means: Removing a node from the end of the Linked List. steps are explained below->
    1. If there are no nodes in the List, return undefined.
    2. Loop through the list until you reach the tail.
    3. Set the next property of the 2nd to last node to be null.
    4. Decrement the length of the list by 1.
    5. Return the value of the node removed.


5. Explain Shifting implementation in Linked List.
ans:
    Shifting means: Removing a node from the beginning of the Linked List. Steps are explained below->
    1. If there are no nodes, return undefined.
    2. Store the current head property in a variable.
    3. Set the head property to be the current head's next.
    4. Decrement the length of the list by 1.
    5. Return the value of the node removed.


6. Explain unshifting implementation in Linked List.
ans: 
    Adding a new node to the list beginning of the Linked List.
    Steps are explained below->
    1. Create a function that receive a value.
    2. Create a new node using the value passed to the function
    3. If there is no head property on the list, set the head   and tail to be the newly created node.
    4. Otherwise set the newly created node's next property to be the current head property on the list.
    5. Set the head property on the list to be that newly created node.
    6. Increment the length of the list by 1
    7. Return the Linked List.


7. How to Retrieve a node by it's position in the Linked List? [in other words, get() method]
ans:
    1. Create a function that receive an index.
    2. If the index is less than zero or greater than or equal to the length of the list, return null.
    3. Loop through the list until you reach the index and return the node at that specific index.


8. How to change the value of a node based on it's position in the Linked List? [in other words, set() method]
ans:
    Here Set means, changing the value of a node based on it's position in the Linked List. How could we implement this? Steps are explained below->
    1. Create a function that should accept a value and and index.
    2. Use previous created get function (if get function not exist create a get function based on no.7 blog) to find the specific node.
    3. If the node is not found, return false.
    4. If the node is found, set the value of that node to be the value passed to the function and return true.


9. How we can Insert or Adding a node to the Linked List at specific position?
ans:
    fist create a function that receive index and value. then
    1. If the index is less than zero or greater than the length, return false.
    2. If the index is same as the length of the list, push a new node to the end of the list.
    3. If the index is 0, unshift a new node to the beginning of the List.
    4. Otherwise, using get method, access the node at the index-1;
    5. Set the next property no that node to be the new node.
    6. Set the new property on the new node to be the previous next.
    7. Increment the length.
    8. Return true.  


10. How to remove a node from a Linked List at a specific position?
ans: 
    Removing a node from the Linked List at a specific position it quite simple. Just follow these instruction below->

    1. Create a function that receive an index.
    2. If the index is less than zero or greater than length, return undefined.
    3. If the index is the same as the length-1, use the pop method which already exist in class.
    4. If the index is 0, Use the shift method (already exist).
    5. Otherwise, using the get method, access the node at the position index-1.
    6. Set the new property on that node to be the next of the next node.
    7. Decrement the length by 1.
    8. Return the value of the node removed.


11. How to reverse a Linked List?
ans: 
    Reverse a Linked List is a tricky operation. Don't worry follow these following steps that can reduce your head ache.
    
    1. Swap the head and tail.
    2. Create a variable called next.
    3. Create a variable called prev.
    4. Create a variable called node and initialize it to the head property.
    5. Loop through the list.
    6. Set next to be the next property on whatever node is.
    7. Set prev to be the value of the node variable.
    8. Set the node variable to be the value of the next variable.






